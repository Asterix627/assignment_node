generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @db.Char(8)
    firstName String
    lastName  String
    email     String   @unique
    password  String
    role      Role     @default(User)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    absens      absen[]
    userAuth    UserAuth[]
    invTroubles InvTrouble[]
}

enum Role {
    User
    Admin
}

model absen {
    id         String    @id @db.Char(8)
    userId     String
    name       String
    waktuMasuk DateTime?

    user User @relation(fields: [userId], references: [id])
}

model auth {
    id    String  @id @db.Char(8)
    token String? @db.VarChar(255)

    userAuth UserAuth[]
}

model UserAuth {
    id     String @id @default(cuid())
    userId String
    authId String

    user User @relation(fields: [userId], references: [id])
    auth auth @relation(fields: [authId], references: [id])

    @@unique([userId, authId]) // Ensure that the pair (userId, authId) is unique
}

model Inventaris {
    id               String    @id @db.Char(8)
    namaInv          String
    kodeInv          String
    tanggalPengadaan DateTime?
    kategoriId       String

    kategori    Kategori     @relation(fields: [kategoriId], references: [id])
    invTroubles InvTrouble[]
}

model Kategori {
    id      String @id @db.Char(8)
    namaKat String

    inventaris Inventaris[]
}

model InvTrouble {
    id           String    @id @db.Char(18)
    tanggal      DateTime?
    inventarisId String
    masalah      String    @db.LongText
    pelaporId    String
    status       Status

    inventaris Inventaris @relation(fields: [inventarisId], references: [id])
    pelapor    User       @relation(fields: [pelaporId], references: [id])
}

enum Status {
    Uncheck
    Checked
    Done
    RepairNeeded
}
